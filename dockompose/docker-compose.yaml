version: '3'
services: 
  broker-service:
    build:
      context: ./../broker-service
      dockerfile: ./../broker-service/broker-service.dockerfile
    restart: always
    ports:
      - "8080:8080"
    deploy:
      mode: replicated
      replicas: 1
  authentication-service:
    build:
      context: ./../authentication-service
      dockerfile: ./../authentication-service/authentication-service.dockerfile
    restart: always
    ports:
      - "8081:8081"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      - DSN="user=admin dbname=postgres sslmode=disable password=admin host=dockompose-postgres-1 port=5432"
  postgres:
    image: postgres
    restart: always
    ports:
      - 5432:5432
    deploy:
      mode: replicated
      replicas: 1
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=postgres
    volumes:
      - ./db-data/postgres:/var/lib/postgresql/data
  mongodb:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    deploy:
      mode: replicated
      replicas: 1
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_ROOT_DATABASE=logs
    volumes:
      - ./db-data/mongo:/data/db
  logger-service:
    build:
      context: ./../logger-service
      dockerfile: ./../logger-service/logger-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
  mailhog:
    image: "mailhog/mailhog:latest"
    restart: always
    ports:
      - 1025:1025
      - 8025:8025
  mail-service:
    build:
      context: ./../mail-service
      dockerfile: ./../mail-service/mail-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
  rabbitmq:
    image: rabbitmq:3.12.4-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    volumes:
       - ./db-data/rabbitmq/:/var/lib/rabbitmq/
  listener-service:
    build:
      context: ./../listener-service
      dockerfile: ./../listener-service/listener-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1